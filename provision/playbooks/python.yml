- name: Install python 3.11.2
  hosts:
    - all

  gather_facts: false
  vars_files:
    - constants/aws.yml
    - constants/controller.yml
 
  pre_tasks:
      
    - name: 'Controller host'
      ansible.builtin.debug:
        msg:
        - "domain: {{ instance_domain }}"
        - "ssh port: {{ ansible_port }}"
        - "ssh user: {{ ansible_user }}"
        - "ssh key: {{ ansible_private_key_file }}"
  
    - name: upgrade all packages
      ansible.builtin.yum: name=* state=latest 
           
    - name: Installs a list of packages 
      ansible.builtin.yum:
        name:
          - gcc
          - perl-core
          - pcre-devel
          - bzip2-devel 
          - libffi-devel 
          - zlib-devel
          - sqlite-devel
          - readline-devel
          - gdbm-devel
          - uuid-devel          
          - xz-devel 
          - ncurses-devel 
          - tk-devel 
          - db4-devel 
          - libpcap-devel 
          - expat-devel
          - tkinter 
          - lzma 
          
    - name: Create download directory
      ansible.builtin.file:
        path: "{{ aws.instance.download.dir }}"
        state: directory
        owner: "{{ aws.instance.user }}"
        group: "{{ aws.instance.user }}"
        mode: 488         
 
  tasks:
  
    - name: Download python archive
      ansible.builtin.get_url:
        url: "{{ python.download_url }}"
        dest: "{{ aws.instance.download.dir }}"
        owner: "{{ aws.instance.user }}"
        group: "{{ aws.instance.user }}" 
        
    - name: Unarchive python
      ansible.builtin.unarchive:
        src: "{{ aws.instance.download.dir }}/{{ python.archive }}"
        dest: "{{ aws.instance.download.dir }}"
        remote_src: true
            
    - name: Initialize python
      ansible.builtin.shell: "export LD_RUN_PATH={{ openssl.dir }}/lib && cd {{ aws.instance.download.dir }}/{{ python.archive_nm }} && ./configure --enable-optimizations --with-openssl={{ openssl.dir }} -C"
      
    - name: Make python
      ansible.builtin.shell: "cd {{ aws.instance.download.dir }}/{{ python.archive_nm }} && make clean && make"
      
    - name: Build python
      ansible.builtin.shell: "cd {{ aws.instance.download.dir }}/{{ python.archive_nm }} && make altinstall"
      
    - name: Create virtualenv
      ansible.builtin.pip:
        name:
          - pip
        state: latest
        virtualenv: "{{ python.venv_path }}"
        virtualenv_command: "{{ python.dir }}/{{ python.executable }} -m venv"   

  post_tasks:
  
    - name: Delete download directory
      ansible.builtin.file:
        path: "{{ aws.instance.download.dir }}"
        state: absent        